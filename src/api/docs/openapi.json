{
  "openapi": "3.0.0",
  "info": {
    "title": "NEXUS AI DeFi Platform API",
    "version": "1.0.0",
    "description": "Comprehensive API for the NEXUS AI DeFi trading and portfolio management platform",
    "contact": {
      "name": "NEXUS AI Support",
      "email": "api-support@nexus-ai.com",
      "url": "https://docs.nexus-ai.com"
    },
    "license": {
      "name": "Proprietary",
      "url": "https://nexus-ai.com/license"
    },
    "termsOfService": "https://nexus-ai.com/terms"
  },
  "servers": [
    {
      "url": "https://api.nexus-ai.com/v1",
      "description": "Production server"
    },
    {
      "url": "https://staging-api.nexus-ai.com/v1",
      "description": "Staging server"
    },
    {
      "url": "http://localhost:3000/api",
      "description": "Development server"
    }
  ],
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "JWT token for authentication"
      },
      "apiKeyAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "X-API-Key",
        "description": "API key for system-to-system authentication"
      }
    },
    "schemas": {
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique user identifier"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "User email address"
          },
          "username": {
            "type": "string",
            "description": "Unique username"
          },
          "role": {
            "type": "string",
            "enum": ["user", "pro", "premium", "admin"],
            "description": "User role"
          },
          "preferences": {
            "$ref": "#/components/schemas/UserPreferences"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "UserPreferences": {
        "type": "object",
        "properties": {
          "currency": {
            "type": "string",
            "default": "USD",
            "description": "Preferred currency"
          },
          "timezone": {
            "type": "string",
            "default": "UTC",
            "description": "User timezone"
          },
          "notifications": {
            "$ref": "#/components/schemas/NotificationSettings"
          },
          "riskTolerance": {
            "type": "string",
            "enum": ["CONSERVATIVE", "MODERATE", "AGGRESSIVE", "CUSTOM"]
          }
        }
      },
      "NotificationSettings": {
        "type": "object",
        "properties": {
          "email": {
            "type": "boolean",
            "default": true
          },
          "push": {
            "type": "boolean",
            "default": true
          },
          "sms": {
            "type": "boolean",
            "default": false
          },
          "discord": {
            "type": "boolean",
            "default": false
          },
          "telegram": {
            "type": "boolean",
            "default": false
          }
        }
      },
      "Agent": {
        "type": "object",
        "required": ["id", "name", "type", "status", "userId"],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "minLength": 3,
            "maxLength": 100
          },
          "type": {
            "type": "string",
            "enum": [
              "ARBITRAGE",
              "MARKET_MAKER",
              "SENTIMENT_ANALYZER",
              "RISK_MANAGER",
              "PORTFOLIO_OPTIMIZER",
              "YIELD_FARMER",
              "NFT_TRADER"
            ]
          },
          "status": {
            "type": "string",
            "enum": ["DRAFT", "TESTING", "DEPLOYED", "PAUSED", "ERROR"]
          },
          "version": {
            "type": "string",
            "description": "Agent version"
          },
          "config": {
            "type": "object",
            "description": "Agent configuration parameters"
          },
          "performance": {
            "$ref": "#/components/schemas/AgentPerformance"
          },
          "userId": {
            "type": "string",
            "format": "uuid"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "deployedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "AgentPerformance": {
        "type": "object",
        "properties": {
          "totalReturns": {
            "type": "number",
            "description": "Total returns in base currency"
          },
          "winRate": {
            "type": "number",
            "minimum": 0,
            "maximum": 1,
            "description": "Win rate as percentage (0-1)"
          },
          "sharpeRatio": {
            "type": "number",
            "description": "Sharpe ratio"
          },
          "maxDrawdown": {
            "type": "number",
            "description": "Maximum drawdown percentage"
          },
          "tradesExecuted": {
            "type": "integer",
            "minimum": 0
          },
          "successfulTrades": {
            "type": "integer",
            "minimum": 0
          },
          "averageTradeTime": {
            "type": "number",
            "description": "Average trade duration in seconds"
          },
          "lastTradeAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Portfolio": {
        "type": "object",
        "required": ["id", "name", "totalValue", "currency", "userId"],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "minLength": 3,
            "maxLength": 100
          },
          "description": {
            "type": "string",
            "maxLength": 500
          },
          "totalValue": {
            "type": "number",
            "minimum": 0
          },
          "currency": {
            "type": "string",
            "minLength": 3,
            "maxLength": 3,
            "default": "USD"
          },
          "allocations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Allocation"
            }
          },
          "performance": {
            "$ref": "#/components/schemas/PortfolioPerformance"
          },
          "riskProfile": {
            "type": "string",
            "enum": ["CONSERVATIVE", "MODERATE", "AGGRESSIVE", "CUSTOM"]
          },
          "userId": {
            "type": "string",
            "format": "uuid"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Allocation": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "asset": {
            "$ref": "#/components/schemas/Asset"
          },
          "percentage": {
            "type": "number",
            "minimum": 0,
            "maximum": 100
          },
          "value": {
            "type": "number",
            "minimum": 0
          },
          "targetPercentage": {
            "type": "number",
            "minimum": 0,
            "maximum": 100
          },
          "rebalanceThreshold": {
            "type": "number",
            "minimum": 0,
            "maximum": 50
          }
        }
      },
      "Asset": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "symbol": {
            "type": "string",
            "description": "Asset symbol (e.g., BTC, ETH)"
          },
          "name": {
            "type": "string",
            "description": "Full asset name"
          },
          "type": {
            "type": "string",
            "enum": ["CRYPTOCURRENCY", "TOKEN", "NFT", "LP_TOKEN", "STABLE_COIN"]
          },
          "price": {
            "type": "number",
            "minimum": 0
          },
          "marketCap": {
            "type": "number",
            "minimum": 0
          },
          "volume24h": {
            "type": "number",
            "minimum": 0
          },
          "change24h": {
            "type": "number",
            "description": "24h price change percentage"
          }
        }
      },
      "PortfolioPerformance": {
        "type": "object",
        "properties": {
          "totalReturns": {
            "type": "number"
          },
          "dailyReturns": {
            "type": "number"
          },
          "weeklyReturns": {
            "type": "number"
          },
          "monthlyReturns": {
            "type": "number"
          },
          "yearlyReturns": {
            "type": "number"
          },
          "volatility": {
            "type": "number",
            "minimum": 0
          },
          "sharpeRatio": {
            "type": "number"
          },
          "maxDrawdown": {
            "type": "number"
          }
        }
      },
      "Payment": {
        "type": "object",
        "required": ["id", "type", "status", "amount", "currency", "userId"],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "type": {
            "type": "string",
            "enum": ["SUBSCRIPTION", "TRANSACTION_FEE", "PROFIT_SHARE", "WITHDRAWAL", "DEPOSIT"]
          },
          "status": {
            "type": "string",
            "enum": ["PENDING", "PROCESSING", "COMPLETED", "FAILED", "REFUNDED"]
          },
          "amount": {
            "type": "number",
            "minimum": 0
          },
          "currency": {
            "type": "string",
            "minLength": 3,
            "maxLength": 3
          },
          "description": {
            "type": "string",
            "maxLength": 500
          },
          "metadata": {
            "type": "object",
            "description": "Additional payment metadata"
          },
          "userId": {
            "type": "string",
            "format": "uuid"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "processedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ArbitrageOpportunity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "tokenA": {
            "$ref": "#/components/schemas/Asset"
          },
          "tokenB": {
            "$ref": "#/components/schemas/Asset"
          },
          "exchangeA": {
            "$ref": "#/components/schemas/Exchange"
          },
          "exchangeB": {
            "$ref": "#/components/schemas/Exchange"
          },
          "priceA": {
            "type": "number",
            "minimum": 0
          },
          "priceB": {
            "type": "number",
            "minimum": 0
          },
          "profitMargin": {
            "type": "number",
            "description": "Profit margin percentage"
          },
          "estimatedProfit": {
            "type": "number",
            "minimum": 0
          },
          "gasEstimate": {
            "type": "number",
            "minimum": 0
          },
          "netProfit": {
            "type": "number"
          },
          "confidence": {
            "type": "number",
            "minimum": 0,
            "maximum": 1
          },
          "expiresAt": {
            "type": "string",
            "format": "date-time"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Exchange": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": ["CEX", "DEX", "AMM"]
          },
          "fees": {
            "$ref": "#/components/schemas/ExchangeFees"
          },
          "supported": {
            "type": "boolean"
          }
        }
      },
      "ExchangeFees": {
        "type": "object",
        "properties": {
          "trading": {
            "type": "number",
            "minimum": 0
          },
          "withdrawal": {
            "type": "number",
            "minimum": 0
          }
        }
      },
      "MarketData": {
        "type": "object",
        "properties": {
          "symbol": {
            "type": "string"
          },
          "price": {
            "type": "number",
            "minimum": 0
          },
          "volume": {
            "type": "number",
            "minimum": 0
          },
          "marketCap": {
            "type": "number",
            "minimum": 0
          },
          "change24h": {
            "type": "number"
          },
          "high24h": {
            "type": "number",
            "minimum": 0
          },
          "low24h": {
            "type": "number",
            "minimum": 0
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Notification": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "type": {
            "type": "string",
            "enum": [
              "TRADE_EXECUTED",
              "PORTFOLIO_REBALANCED",
              "AGENT_STATUS_CHANGED",
              "PAYMENT_PROCESSED",
              "SYSTEM_MAINTENANCE",
              "PRICE_ALERT"
            ]
          },
          "title": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "data": {
            "type": "object",
            "description": "Additional notification data"
          },
          "read": {
            "type": "boolean",
            "default": false
          },
          "priority": {
            "type": "string",
            "enum": ["low", "medium", "high", "critical"],
            "default": "medium"
          },
          "userId": {
            "type": "string",
            "format": "uuid"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Error": {
        "type": "object",
        "properties": {
          "error": {
            "type": "object",
            "properties": {
              "message": {
                "type": "string",
                "description": "Error message"
              },
              "code": {
                "type": "string",
                "description": "Error code"
              },
              "statusCode": {
                "type": "integer",
                "description": "HTTP status code"
              },
              "details": {
                "type": "object",
                "description": "Additional error details"
              }
            }
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "path": {
            "type": "string",
            "description": "API endpoint path"
          },
          "method": {
            "type": "string",
            "description": "HTTP method"
          }
        }
      },
      "PaginatedResponse": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "minimum": 0,
            "description": "Total number of items"
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "description": "Items per page"
          },
          "offset": {
            "type": "integer",
            "minimum": 0,
            "description": "Number of items skipped"
          },
          "hasNext": {
            "type": "boolean",
            "description": "Whether there are more items"
          },
          "hasPrevious": {
            "type": "boolean",
            "description": "Whether there are previous items"
          }
        }
      }
    },
    "responses": {
      "BadRequest": {
        "description": "Bad Request - Invalid input parameters",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "example": {
              "error": {
                "message": "Validation failed",
                "code": "VALIDATION_ERROR",
                "statusCode": 400,
                "details": [
                  {
                    "field": "email",
                    "message": "Must be a valid email address"
                  }
                ]
              },
              "timestamp": "2024-01-01T00:00:00Z",
              "path": "/api/auth/register",
              "method": "POST"
            }
          }
        }
      },
      "Unauthorized": {
        "description": "Unauthorized - Authentication required",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "example": {
              "error": {
                "message": "Authentication token required",
                "code": "AUTHENTICATION_ERROR",
                "statusCode": 401
              },
              "timestamp": "2024-01-01T00:00:00Z",
              "path": "/api/agents",
              "method": "GET"
            }
          }
        }
      },
      "Forbidden": {
        "description": "Forbidden - Insufficient permissions",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "example": {
              "error": {
                "message": "Insufficient permissions",
                "code": "AUTHORIZATION_ERROR",
                "statusCode": 403,
                "details": {
                  "required": "VIEW_ARBITRAGE"
                }
              },
              "timestamp": "2024-01-01T00:00:00Z",
              "path": "/api/arbitrage/opportunities",
              "method": "GET"
            }
          }
        }
      },
      "NotFound": {
        "description": "Not Found - Resource does not exist",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "example": {
              "error": {
                "message": "Agent not found",
                "code": "NOT_FOUND",
                "statusCode": 404
              },
              "timestamp": "2024-01-01T00:00:00Z",
              "path": "/api/agents/123e4567-e89b-12d3-a456-426614174000",
              "method": "GET"
            }
          }
        }
      },
      "Conflict": {
        "description": "Conflict - Resource already exists",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "example": {
              "error": {
                "message": "Email already registered",
                "code": "CONFLICT_ERROR",
                "statusCode": 409
              },
              "timestamp": "2024-01-01T00:00:00Z",
              "path": "/api/auth/register",
              "method": "POST"
            }
          }
        }
      },
      "TooManyRequests": {
        "description": "Too Many Requests - Rate limit exceeded",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "example": {
              "error": {
                "message": "Rate limit exceeded",
                "code": "RATE_LIMIT_ERROR",
                "statusCode": 429,
                "details": {
                  "resetTime": 1640995200000
                }
              },
              "timestamp": "2024-01-01T00:00:00Z",
              "path": "/api/analytics/portfolio",
              "method": "POST"
            }
          }
        }
      },
      "InternalServerError": {
        "description": "Internal Server Error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "example": {
              "error": {
                "message": "Internal server error",
                "code": "INTERNAL_ERROR",
                "statusCode": 500
              },
              "timestamp": "2024-01-01T00:00:00Z",
              "path": "/api/agents",
              "method": "POST"
            }
          }
        }
      }
    },
    "parameters": {
      "LimitParam": {
        "name": "limit",
        "in": "query",
        "description": "Number of items to return (1-100)",
        "schema": {
          "type": "integer",
          "minimum": 1,
          "maximum": 100,
          "default": 20
        }
      },
      "OffsetParam": {
        "name": "offset",
        "in": "query",
        "description": "Number of items to skip",
        "schema": {
          "type": "integer",
          "minimum": 0,
          "default": 0
        }
      },
      "TimeRangeParam": {
        "name": "timeRange",
        "in": "query",
        "description": "Time range for data",
        "schema": {
          "type": "string",
          "enum": ["HOUR", "DAY", "WEEK", "MONTH", "QUARTER", "YEAR", "ALL"],
          "default": "MONTH"
        }
      },
      "CurrencyParam": {
        "name": "currency",
        "in": "query",
        "description": "Currency code (3 characters)",
        "schema": {
          "type": "string",
          "minLength": 3,
          "maxLength": 3,
          "default": "USD"
        }
      }
    }
  },
  "tags": [
    {
      "name": "Authentication",
      "description": "User authentication and authorization"
    },
    {
      "name": "Users",
      "description": "User management and preferences"
    },
    {
      "name": "Agents",
      "description": "AI trading agent management"
    },
    {
      "name": "Portfolios",
      "description": "Portfolio management and tracking"
    },
    {
      "name": "Payments",
      "description": "Payment processing and history"
    },
    {
      "name": "Arbitrage",
      "description": "Arbitrage opportunities and execution"
    },
    {
      "name": "Analytics",
      "description": "Market analysis and performance metrics"
    },
    {
      "name": "Market Data",
      "description": "Real-time and historical market data"
    },
    {
      "name": "Notifications",
      "description": "System and user notifications"
    },
    {
      "name": "System",
      "description": "System health and monitoring"
    }
  ],
  "paths": {
    "/api/health": {
      "get": {
        "tags": ["System"],
        "summary": "Health check endpoint",
        "description": "Check system health and status",
        "operationId": "healthCheck",
        "security": [],
        "responses": {
          "200": {
            "description": "System is healthy",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": ["healthy", "unhealthy"]
                    },
                    "timestamp": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "version": {
                      "type": "string"
                    },
                    "services": {
                      "type": "object",
                      "properties": {
                        "database": {
                          "type": "string",
                          "enum": ["healthy", "unhealthy"]
                        },
                        "cache": {
                          "type": "string",
                          "enum": ["healthy", "unhealthy"]
                        },
                        "marketData": {
                          "type": "string",
                          "enum": ["healthy", "unhealthy"]
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "System is unhealthy",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": ["unhealthy"]
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "x-code-samples": [
    {
      "lang": "JavaScript",
      "source": "// Example API usage with fetch\nconst response = await fetch('https://api.nexus-ai.com/v1/api/agents', {\n  headers: {\n    'Authorization': 'Bearer your-jwt-token',\n    'Content-Type': 'application/json'\n  }\n});\nconst agents = await response.json();"
    },
    {
      "lang": "Python",
      "source": "# Example API usage with requests\nimport requests\n\nheaders = {\n    'Authorization': 'Bearer your-jwt-token',\n    'Content-Type': 'application/json'\n}\n\nresponse = requests.get(\n    'https://api.nexus-ai.com/v1/api/agents',\n    headers=headers\n)\nagents = response.json()"
    },
    {
      "lang": "cURL",
      "source": "# Example API usage with cURL\ncurl -X GET \\\n  'https://api.nexus-ai.com/v1/api/agents' \\\n  -H 'Authorization: Bearer your-jwt-token' \\\n  -H 'Content-Type: application/json'"
    }
  ]
}